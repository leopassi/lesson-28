{"version":3,"sources":["components/stripe-button/stripe-button.component.jsx","components/checkout-item/checkout-item.styles.jsx","components/checkout-item/checkout-item.component.jsx","pages/checkout/checkout.styles.jsx","pages/checkout/checkout.component.jsx"],"names":["connect","dispatch","paymentSuccess","price","priceForStripe","t","useTranslation","label","name","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","JSON","parse","stripeKey","CheckoutItemContainer","styled","div","ImageContainer","TextContainer","span","QuantityContainer","RemoveButtonContainer","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","imageUrl","quantity","src","alt","onClick","CheckoutPageContainer","CheckoutHeaderContainer","HeaderBlockContainer","TotalContainer","WarningContainer","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","map","id"],"mappings":"oOAyDeA,cAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtCC,eAAgB,kBAAMD,EAASC,mBAGlBF,EAjDc,SAAC,GAA+B,IAA7BG,EAA4B,EAA5BA,MAAOD,EAAqB,EAArBA,eAC/BE,EAAyB,IAARD,EAIfE,EAAMC,cAAND,EAwBR,OACE,cAAC,IAAD,CACEE,MAAOF,EAAE,WACTG,KAAK,oBACLC,gBAAc,EACdC,iBAAe,EACfC,MAAM,iCACNC,YAAaP,EAAE,cAAe,CAAEF,MAAM,GAAD,OAAKA,KAC1CU,OAAQT,EACRU,WAAYT,EAAE,WACdU,MAhCY,SAAAA,GACdC,IAAM,CACJC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACJN,OAAQT,EACRW,WAGDK,MAAK,SAAAC,GAAQ,OAZInB,MAYWoB,MAAM,GAAD,OAAIjB,EAAE,wBACvCkB,OAAM,SAAAC,GACLC,QAAQC,IAAI,qCAAuCC,KAAKC,MAAMJ,IAC9DF,MAAM,qEAqBRO,UAtCmB,mH,uBCRZC,EAAwBC,IAAOC,IAAV,0LAUrBC,EAAiBF,IAAOC,IAAV,wHAUdE,EAAgBH,IAAOI,KAAV,2CAIbC,EAAoBL,YAAOG,EAAPH,CAAH,0HAYjBM,EAAwBN,IAAOC,IAAV,uECUnBhC,cACb,MAPyB,SAAAC,GAAQ,MAAK,CACtCqC,UAAW,SAAAC,GAAI,OAAItC,EAASuC,YAAkBD,KAC9CE,QAAS,SAAAF,GAAI,OAAItC,EAASwC,YAAQF,KAClCG,WAAY,SAAAH,GAAI,OAAItC,EAASyC,YAAWH,QAG3BvC,EA7BM,SAAC,GAAkD,IAAhD2C,EAA+C,EAA/CA,SAAUL,EAAqC,EAArCA,UAAWG,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC5ClC,EAAoCmC,EAApCnC,KAAMoC,EAA8BD,EAA9BC,SAAUzC,EAAoBwC,EAApBxC,MAAO0C,EAAaF,EAAbE,SACvBxC,EAAMC,cAAND,EAER,OACE,eAACyB,EAAD,WACE,cAACG,EAAD,UACE,qBAAKa,IAAKF,EAAUG,IAAI,WAE1B,cAACb,EAAD,UAAgB7B,EAAE,GAAD,OAAIG,MACrB,eAAC4B,EAAD,WACE,qBAAKY,QAAS,kBAAMN,EAAWC,IAA/B,oBACA,+BAAOE,IACP,qBAAKG,QAAS,kBAAMP,EAAQE,IAA5B,uBAEF,cAACT,EAAD,UAAgB/B,IAChB,cAACkC,EAAD,CAAuBW,QAAS,kBAAMV,EAAUK,IAAhD,0B,QCjCOM,EAAwBlB,IAAOC,IAAV,+NAcrBkB,EAA0BnB,IAAOC,IAAV,wJAQvBmB,EAAuBpB,IAAOC,IAAV,mHASpBoB,EAAiBrB,IAAOC,IAAV,2FAMdqB,EAAmBtB,IAAOC,IAAV,2GCiBvBsB,EAAkBC,YAAyB,CAC/CC,UAAWC,IACXC,MAAOC,MAGM3D,sBAAQsD,EAARtD,EAvCM,SAAC,GAA0B,IAAxBwD,EAAuB,EAAvBA,UAAWE,EAAY,EAAZA,MACzBrD,EAAMC,cAAND,EACR,OACA,eAAC4C,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,UACE,+BAAO9C,EAAE,eAEX,cAAC8C,EAAD,UACE,iDAEF,cAACA,EAAD,UACE,+BAAO9C,EAAE,gBAEX,cAAC8C,EAAD,UACE,+BAAO9C,EAAE,aAEX,cAAC8C,EAAD,UACE,+BAAO9C,EAAE,iBAGZmD,EAAUI,KAAI,SAAAjB,GAAQ,OACrB,cAAC,EAAD,CAAgCA,SAAUA,GAAvBA,EAASkB,OAE9B,eAACT,EAAD,sBAAyBM,KACzB,eAACL,EAAD,WACGhD,EAAE,QACH,uBAFF,iDAKA,cAAC,EAAD,CAAsBF,MAAOuD","file":"static/js/7.bdfabb59.chunk.js","sourcesContent":["import React from 'react';\r\nimport StripeCheckout from 'react-stripe-checkout';\r\nimport { paymentSuccess } from '../../redux/user/user.actions';\r\n\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst StripeCheckoutButton = ({ price, paymentSuccess }) => {\r\n  const priceForStripe = price * 100;\r\n  const publishableKey = 'pk_test_51ImNkcDou15m3Tay8iZocKb7v627txDgAoKFjyc0YR5rQt0agPMo5aXp7kPt6KUGmOrIUTVoIbPlyFuHyTbBARnT00iMpM30vQ';\r\n\r\n  const payment = () => paymentSuccess();\r\n  const { t } = useTranslation();\r\n\r\n  const onToken = token => {\r\n    axios({\r\n      url: 'payment' ,\r\n      method: 'post',\r\n      data: {\r\n        amount: priceForStripe,\r\n        token\r\n      }\r\n    }) // ATTENTION: Stripe EXECUTE CE QU'IL YA APRES LE then UNIQUEMENT EN PRODUCTION !!!\r\n      .then(response => payment(), alert(`${t('Payment Succesful')}`))\r\n      .catch(error => {\r\n        console.log('There was an issue with th Payment' + JSON.parse(error));\r\n        alert('There was an error. Make sure to use the provided Credit Card');\r\n      });\r\n\r\n    // console.log(token);\r\n    // console.log(paymentSuccess());\r\n    // await payment();\r\n    // payment();\r\n    // alert('Payment Succesful!');\r\n  };\r\n\r\n  return (\r\n    <StripeCheckout\r\n      label={t('Pay Now')}\r\n      name='LEO Discount Ltd.'\r\n      billingAddress\r\n      shippingAddress\r\n      image='https://svgshare.com/i/CUz.svg'\r\n      description={t('TotalStripe', { price: `${price}` })}\r\n      amount={priceForStripe}\r\n      panelLabel={t('Pay Now')}\r\n      token={onToken}\r\n      stripeKey={publishableKey}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  paymentSuccess: () => dispatch(paymentSuccess())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);\r\n","import styled from 'styled-components';\r\n\r\nexport const CheckoutItemContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  min-height: 100px;\r\n  border-bottom: 1px solid darkgrey;\r\n  padding: 15px 0;\r\n  font-size: 20px;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  width: 23%;\r\n  padding-right: 15px;\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const TextContainer = styled.span`\r\n  width: 23%;\r\n`;\r\n\r\nexport const QuantityContainer = styled(TextContainer)`\r\n  display: flex;\r\n\r\n  span {\r\n    margin: 0 10px;\r\n  }\r\n\r\n  div {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const RemoveButtonContainer = styled.div`\r\n  padding-left: 12px;\r\n  cursor: pointer;\r\n`;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  clearItemFromCart,\r\n  addItem,\r\n  removeItem\r\n} from '../../redux/cart/cart.actions';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport {\r\n  CheckoutItemContainer,\r\n  ImageContainer,\r\n  TextContainer,\r\n  QuantityContainer,\r\n  RemoveButtonContainer\r\n} from './checkout-item.styles';\r\n\r\nconst CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) => {\r\n  const { name, imageUrl, price, quantity } = cartItem;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <CheckoutItemContainer>\r\n      <ImageContainer>\r\n        <img src={imageUrl} alt='item' />\r\n      </ImageContainer>\r\n      <TextContainer>{t(`${name}`)}</TextContainer>\r\n      <QuantityContainer>\r\n        <div onClick={() => removeItem(cartItem)}>&#10094;</div>\r\n        <span>{quantity}</span>\r\n        <div onClick={() => addItem(cartItem)}>&#10095;</div>\r\n      </QuantityContainer>\r\n      <TextContainer>{price}</TextContainer>\r\n      <RemoveButtonContainer onClick={() => clearItem(cartItem)}>\r\n        &#10005;\r\n      </RemoveButtonContainer>\r\n    </CheckoutItemContainer>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  clearItem: item => dispatch(clearItemFromCart(item)),\r\n  addItem: item => dispatch(addItem(item)),\r\n  removeItem: item => dispatch(removeItem(item))\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(CheckoutItem);\r\n","import styled from 'styled-components';\r\n\r\nexport const CheckoutPageContainer = styled.div`\r\n  width: 55%;\r\n  min-height: 90vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 50px auto 0;\r\n\r\n  button {\r\n    margin-left: auto;\r\n    margin-top: 50px;\r\n  }\r\n`;\r\n\r\nexport const CheckoutHeaderContainer = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid darkgrey;\r\n`;\r\n\r\nexport const HeaderBlockContainer = styled.div`\r\n  text-transform: capitalize;\r\n  width: 23%;\r\n\r\n  &:last-child {\r\n    width: 8%;\r\n  }\r\n`;\r\n\r\nexport const TotalContainer = styled.div`\r\n  margin-top: 30px;\r\n  margin-left: auto;\r\n  font-size: 36px;\r\n`;\r\n\r\nexport const WarningContainer = styled.div`\r\n  text-align: center;\r\n  margin-top: 40px;\r\n  font-size: 24px;\r\n  color: red;\r\n`;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button.component';\r\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\r\n\r\nimport {\r\n  selectCartItems,\r\n  selectCartTotal\r\n} from '../../redux/cart/cart.selectors';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport {\r\n  CheckoutPageContainer,\r\n  CheckoutHeaderContainer,\r\n  HeaderBlockContainer,\r\n  TotalContainer,\r\n  WarningContainer\r\n} from './checkout.styles';\r\n\r\nconst CheckoutPage = ({ cartItems, total }) => {\r\n  const { t } = useTranslation();\r\n  return (\r\n  <CheckoutPageContainer>\r\n    <CheckoutHeaderContainer>\r\n      <HeaderBlockContainer>\r\n        <span>{t('Product')}</span>\r\n      </HeaderBlockContainer>\r\n      <HeaderBlockContainer>\r\n        <span>Description</span>\r\n      </HeaderBlockContainer>\r\n      <HeaderBlockContainer>\r\n        <span>{t('Quantity')}</span>\r\n      </HeaderBlockContainer>\r\n      <HeaderBlockContainer>\r\n        <span>{t('Price')}</span>\r\n      </HeaderBlockContainer>\r\n      <HeaderBlockContainer>\r\n        <span>{t('Remove')}</span>\r\n      </HeaderBlockContainer>\r\n    </CheckoutHeaderContainer>\r\n    {cartItems.map(cartItem => (\r\n      <CheckoutItem key={cartItem.id} cartItem={cartItem} />\r\n    ))}\r\n    <TotalContainer>TOTAL: ${total}</TotalContainer>\r\n    <WarningContainer>\r\n      {t('Warn')}\r\n      <br />\r\n      4242 4242 4242 4242 - Exp: 01/24 - CVV: 123\r\n    </WarningContainer>\r\n    <StripeCheckoutButton price={total} />\r\n  </CheckoutPageContainer>\r\n);}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems: selectCartItems,\r\n  total: selectCartTotal\r\n});\r\n\r\nexport default connect(mapStateToProps)(CheckoutPage);\r\n"],"sourceRoot":""}